@page "/games/{gameId}/{playerId}"
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject TriviaRealtimeDB RealtimeDB
@inject NavigationManager NavManager 
@inject IOpenTriviaClient OpenTriviaClient
@using System.Collections.Immutable
@using Guth.OpenTrivia.WebApp.Components
@using Guth.OpenTrivia.Abstractions
@using Guth.OpenTrivia.Abstractions.Models
@using Guth.OpenTrivia.FirebaseDB
@using MudBlazor

<LoadingOverlay Visible="_initialLoad" />
@if(!_initialLoad)
{
    <MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudText Align="Align.Center" Typo="Typo.h4" GutterBottom="true">Connection Code: @_game.ConnectionCode</MudText>
    </MudItem>
    @if (PlayerId == _game.HostPlayerId && _game.State == GameState.Created)
    {
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton OnClick="StartGame" Variant="Variant.Filled" Color="Color.Primary">Start Game</MudButton>
        </MudItem>
    }
    else if (_game.State == GameState.Created)
    {
        <MudItem xs="12" Class="d-flex justify-center">
            <MudText Align="Align.Center" Typo="Typo.h4" Color="Color.Secondary">Waiting for host to start game...</MudText>
        </MudItem>
    }
    @if (_game.State == GameState.Created || _game.State == GameState.RoundEnd || (_game.State == GameState.RoundBegin && _answered))
    {
        @foreach (PlayerScore score in _results)
        {
            <MudItem xs="10" md="6" lg="4" Class="d-flex flex-column">
                <ParticipantCard Name="@_players.FirstOrDefault(p => p.Id == score.PlayerId).Name" Points="score.Points" />
            </MudItem>
        }
        if (_answered && _game.State == GameState.RoundBegin)
        {
            <MudItem xs="12" Class="d-flex justify-center">
                <MudText Align="Align.Center" Typo="Typo.h4" Color="Color.Secondary">Waiting for round complete, sit tight!</MudText>
            </MudItem>
        }
    }
    else if (_game.State == GameState.Started)
    {
        <MudItem xs="12" Class="d-flex justify-center">
            <MudText Align="Align.Center" Typo="Typo.h4" Color="Color.Primary">Ready up! Game is about to start...</MudText>
        </MudItem>
    }
    else if (_game.State == GameState.RoundBegin)
    {
        <MudItem xs="12" Class="d-flex justify-center">
            <MudText Align="Align.Center" Typo="Typo.h3">Round @_game.RoundNumber</MudText>
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudText Align="Align.Center" Typo="Typo.h4" Color="Color.Primary">@_currentRound.Question.Question</MudText>
        </MudItem>
        foreach (string answer in _answers)
        {
            <MudItem xs="12" md="6" lg="6" Class="d-flex justify-center">
                <MudButton Variant="Variant.Outlined" FullWidth="true" Size=Size.Large OnClick="async() => await SubmitAnswer(answer)">@answer</MudButton>
            </MudItem>
        }
    }
    </MudGrid>
}
@code {
    [Parameter]
    public string GameId { get; set; }
    [Parameter]
    public string PlayerId { get; set; }

    private bool _initialLoad = true;
    private Player _player { get; set; }
    private Game _game { get; set; }
    private ICollection<Player> _players;
    private TriviaQuestion _question;
    private TriviaRound _currentRound;
    private bool _answered = false;
    private List<string> _answers = new List<string>();
    private ICollection<PlayerScore> _results = new List<PlayerScore>();

    protected async override Task OnInitializedAsync()
    {
        _game = await RealtimeDB.GetGame(GameId);
        _player = await RealtimeDB.GetPlayer(PlayerId);
        if (_game is null || _player is null || !_game.Players.Contains(_player.Id))
        {
            NavManager.NavigateTo("/");
            return;
        }
        _results = _game.Results;
        _players = await RealtimeDB.GetGamePlayers(GameId);
        _currentRound = await RealtimeDB.GetCurrentRound(GameId);
        ShuffleAnswers();
        _answered = _game.Rounds.LastOrDefault()?.Answers?.Any(a => a.PlayerId == PlayerId) ?? false;
        RealtimeDB.OnGameUpdate(GameId, async (game) => await UpdateGameState(game));
        RealtimeDB.OnPlayerAddedOrRemoved(GameId, async (players) => await UpdatePlayerList(players));
        RealtimeDB.OnRoundUpdate(GameId, async (round) => await UpdateRound(round));
        RealtimeDB.OnScoresUpdated(GameId, async (scores) => await UpdateGameScores(scores));
        _initialLoad = false;

    }

    private async Task StartGame()
    {
        ImmutableList<TriviaQuestion> questions = await OpenTriviaClient.GetTriviaQuestions(_game.QuestionOptions);
        await RealtimeDB.StartGame(GameId, questions);
    }

    private async Task UpdateGameState(Game updated)
    {
        //Snackbar.Add($"Game has updated: {updated.State}");
        _game = updated;
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateGameScores(ICollection<PlayerScore> updatedScores)
    {
        _results = updatedScores;
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdatePlayerList(ICollection<Player> updatedPlayers)
    {
        foreach (var player in updatedPlayers.Where(p => _players.FirstOrDefault(p1 => p1.Id == p.Id) == null))
        {
            Snackbar.Add($"{player.Name} has joined the game!", Severity.Success);
        }

        foreach (var player in _players.Where(p => updatedPlayers.FirstOrDefault(p1 => p1.Id == p.Id) == null))
        {
            Snackbar.Add($"{player.Name} has left the game", Severity.Info);
        }
        _players = updatedPlayers;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SubmitAnswer(string answer)
    {
        bool correct = await RealtimeDB.AnswerQuestion(GameId, PlayerId, answer);
        _answered = true;
        await InvokeAsync(StateHasChanged);
        if (correct)
        {
            Snackbar.Add("Correct!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Incorrect!", Severity.Error);
        }
    }

    private async Task UpdateRound(TriviaRound round)
    {
        if (_currentRound.RoundNumber != round.RoundNumber)
        {
            _answered = false;
            _currentRound = round;
            ShuffleAnswers();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ShuffleAnswers()
    {
        if (_currentRound != null)
        {
            var answers = _currentRound.Question.IncorrectAnswers.ToList();
            answers.Add(_currentRound.Question.CorrectAnswer);
            answers.Shuffle();
            _answers = answers;
        }
    }
}

@using Guth.OpenTrivia.GrainInterfaces
@using Guth.OpenTrivia.Abstractions
@using Guth.OpenTrivia.Abstractions.Enums

<MudCard Elevation="5">
    <MudCardContent>
        <MudForm>
            <MudSelect T="int" Label="Number of questions" Required="true" Dense="true" @bind-Value="_questionOptions.NumberOfQuestions">
                @for (int i = 1; i <= 50; i++)
                {
                    <MudSelectItem Value="@i"></MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="QuestionCategory" Label="Category" @bind-Value="_questionOptions.Category" Dense="true">
                @foreach (var category in Enum.GetValues<QuestionCategory>())
                {
                    <MudSelectItem Value="@category">@category</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="QuestionDifficulty" Label="Difficulty" Required="true" @bind-Value="_questionOptions.Difficulty" Dense="true">
                @foreach (var difficulty in Enum.GetValues<QuestionDifficulty>())
                {
                    <MudSelectItem Value="@difficulty">@difficulty</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </MudCardContent>
    <MudCardActions Class="justify-content-center">
        <MudButton OnClick="InvokeOnSubmit" Variant="Variant.Filled" Color="Color.Primary">Create Game</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private IGameGrain _gameGrain;
    private QuestionOptions _questionOptions;
    private GameOptions _gameOptions;

    [Parameter]
    public EventCallback<(GameOptions,QuestionOptions)> OnSubmit { get; set; }

    protected override void OnInitialized()
    {
        _questionOptions = new QuestionOptions();
        _gameOptions = new GameOptions();
    }

    private async Task InvokeOnSubmit()
    {
        await OnSubmit.InvokeAsync((_gameOptions, _questionOptions));
    }
}

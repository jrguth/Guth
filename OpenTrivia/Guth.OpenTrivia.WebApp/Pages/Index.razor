@page "/"
@inject IClusterClient ClusterClient
@inject IDialogService DialogService
@using Guth.OpenTrivia.GrainInterfaces
@using Guth.OpenTrivia.WebApp.Components
@using Orleans
@using MudBlazor

@if (_renderPlayerCard)
{
    <MudCard Class="w-25 mx-auto justify-center mb-4" Elevation="5">
        <MudCardHeader Class="justify-center">
            <CardHeaderAvatar>
                @if (_playerInitialized)
                {
                    <MudAvatar Color="@GetRandomColor()">@_playerName[0].ToString().ToUpper()</MudAvatar>
                }
                else
                {
                    <MudSkeleton Class="mx-auto" SkeletonType="SkeletonType.Circle" Width="40px" Height="40px"></MudSkeleton>
                }
            </CardHeaderAvatar>
        </MudCardHeader>
        
        <MudCardContent>
            @if (_playerInitialized)
            {
                <MudText Align="Align.Center" Typo="Typo.h4">@_playerName</MudText>
            }
            else
            {
                <MudSkeleton Class="mx-auto"  SkeletonType="SkeletonType.Text"></MudSkeleton>
            }
        </MudCardContent>
    </MudCard>
}



@code {
    private bool _renderPlayerCard;
    private IPlayerGrain _player;
    private Guid _playerId;
    private string _playerName;
    private bool _playerInitialized;
    private IDialogReference _dialog;
    private Task _playerInit;

    protected override void OnInitialized()
    {
        _playerName = string.Empty;
        _playerInitialized = false;
        _renderPlayerCard = false;
        _playerInit = InitializePlayer();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IDialogReference dialog = DialogService.Show<PlayerNameDialog>("Enter a name", new DialogOptions
            {
                DisableBackdropClick = true,
                Position = DialogPosition.Center
            });
            DialogResult result = await dialog.Result;
            _renderPlayerCard = true;
            _playerName = result.Data as string;
            StateHasChanged();
            await _playerInit;
        }
    }

    private async Task InitializePlayer()
    {
        _player = ClusterClient.GetGrain<IPlayerGrain>(Guid.NewGuid());
        _playerId = _player.GetPrimaryKey();
        await _player.SetName(_playerName);
        _playerInitialized = true;
        StateHasChanged();
    }

    private Color GetRandomColor()
    {
        var colors = Enum.GetValues<Color>();
        var selection = new Random().Next(colors.Length);
        return colors[selection];
    }
}
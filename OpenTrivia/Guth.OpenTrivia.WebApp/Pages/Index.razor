@page "/"
@inject IClusterClient ClusterClient
@inject IDialogService DialogService
@using Guth.OpenTrivia.GrainInterfaces
@using Guth.OpenTrivia.WebApp.Components
@using Orleans
@using MudBlazor

@if (_playerName != null)
{
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudCard Class="w-25 mx-auto mb-4" Elevation="5">
                <MudCardHeader Class="justify-center">
                    <CardHeaderAvatar>
                        @if (_playerInitialized)
                        {
                            <MudAvatar Color="@GetRandomColor()">@_playerName[0].ToString().ToUpper()</MudAvatar>
                        }
                        else
                        {
                            <MudSkeleton Class="mx-auto" SkeletonType="SkeletonType.Circle" Width="40px" Height="40px"></MudSkeleton>
                        }
                    </CardHeaderAvatar>
                </MudCardHeader>
                <MudCardContent>
                    @if (_playerInitialized)
                    {
                        <MudText Align="Align.Center" Typo="Typo.h4">@_playerName</MudText>
                    }
                    else
                    {
                        <MudSkeleton Class="mx-auto" SkeletonType="SkeletonType.Text"></MudSkeleton>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="4">
            <MudText Align="Align.Center" Typo="Typo.h6">Connect to a game</MudText> 
        </MudItem>
        <MudItem xs="4">
            <MudText Align="Align.Center" Typo="Typo.h6">Start a new game</MudText>
            <CreateGameForm OnGameCreated="GameCreated"></CreateGameForm>
        </MudItem>
    </MudGrid>
    

}

@code {
    [CascadingParameter(Name = "PlayerGrain")]
    private IPlayerGrain _playerGrain { get; set; }
    private string _playerName;
    private IDialogReference _dialog;
    private bool _playerInitialized = false;
    private string _gameConnectionCode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IDialogReference dialog = DialogService.Show<PlayerNameDialog>("Enter a name", new DialogOptions
            {
                DisableBackdropClick = true,
                Position = DialogPosition.Center
            });
            DialogResult result = await dialog.Result;
            _playerName = result.Data as string;
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(2));
            await _playerGrain.SetName(result.Data as string);
            _playerInitialized = true;
            StateHasChanged();
        }
    }

    private async Task GameCreated(IGameGrain gameGrain)
    {
        gameGrain.GetPrimaryKey();
    }

    private Color GetRandomColor()
    {
        var colors = Enum.GetValues<Color>();
        var selection = new Random().Next(colors.Length);
        return colors[selection];
    }
}
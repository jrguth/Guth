@page "/titles/{titleName}"
@inject IPoetryDBClient Client
@inject ISnackbar Snackbar

<MudOverlay Visible="_poem == null">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@if(_poem != null)
{
    <TitleCard
        Poem="_poem"
        IsSaved="_cachedPoem != null"
        OnSaveClicked="SavePoem">  
    </TitleCard>
}

@code {
    [Parameter] public string TitleName { get; set; }
    [Inject] public NavigationManager Nav { get; set; }
    [Inject] public IDbContextFactory<PoetryContext> ContextFactory { get; set; }

    private Poem _poem;
    private PoemTitle _cachedPoem;

    protected override async Task OnParametersSetAsync()
    {
        _poem = await Client.GetTitle(TitleName);
        using (var context = ContextFactory.CreateDbContext())
        {
            _cachedPoem = await GetDbTitleAsync(context);
        }
        StateHasChanged();
    }

    private Task<PoemTitle> GetDbTitleAsync(PoetryContext context)
    {
        return context.Titles
                .FirstOrDefaultAsync(pt =>
                    pt.Title == _poem.Title &&
                    pt.Author != null &&
                    pt.Author.Name == _poem.Author);
    }

    private async Task SavePoem()
    {
        using (PoetryContext context = ContextFactory.CreateDbContext())
        {
            if (_cachedPoem is null)
            {
                _cachedPoem = new PoemTitle
                {
                    Title = _poem.Title,
                    Lines = string.Join("\n", _poem.Lines),
                    Author = new PoemAuthor
                    {
                        Name = _poem.Author
                    }
                };
                await context.AddAsync(_cachedPoem);
                await context.SaveChangesAsync();
            }
        }
        Snackbar.Add("Saved!", Severity.Success);
    }
}
